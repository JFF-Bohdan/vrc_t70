import pytest

from vrc_t70 import exceptions
from vrc_t70.crc import default_crc
from vrc_t70.protocol.responses import raw_response_data, typed_responses_factory


@pytest.mark.parametrize(
    "data",
    [
        # Get session id response
        # Shorter
        bytes([0x08, 0x07, 0x22, 0x33, 0x00, 0x00, 0xee]),
        bytes([0x08, 0x07, 0x22, 0x33, 0x00, 0x03, 0xde, 0xad, 0xbe, 0x34]),
        # Longer
        bytes([0x08, 0x07, 0x22, 0x33, 0x00, 0x05, 0xde, 0xad, 0xbe, 0xef, 0xaa, 0x06]),

        # Set session id response
        # Shorter
        bytes([0x08, 0x06, 0x22, 0x33, 0x00, 0x00, 0x58]),
        bytes([0x08, 0x06, 0x22, 0x33, 0x00, 0x03, 0xde, 0xad, 0xbe, 0x77]),
        # Longer
        bytes([0x08, 0x06, 0x22, 0x33, 0x00, 0x05, 0xde, 0xad, 0xbe, 0xef, 0xaa, 0xa4]),

        # Rescan sensors on trunk
        # Shorter
        bytes([0x08, 0x09, 0x22, 0x33, 0x00, 0x00, 0x6b]),
        bytes([0x08, 0x09, 0x22, 0x33, 0x00, 0x01, 0x04, 0x4f]),
        # Longer
        bytes([0x08, 0x09, 0x22, 0x33, 0x00, 0x04, 0x04, 0xff, 0xff, 0xff, 0x73]),

        # Get sensors on trunk
        # Shorter
        bytes([0x08, 0x0a, 0x22, 0x33, 0x00, 0x00, 0x64]),
        bytes([0x08, 0x0a, 0x22, 0x33, 0x00, 0x01, 0x04, 0x32]),
        # Longer
        bytes([0x08, 0x0a, 0x22, 0x33, 0x00, 0x04, 0x04, 0x03, 0xff, 0xff, 0x38]),

        # Get temperature of sensor on trunk
        # Shorter
        bytes([0x08, 0x02, 0x22, 0x33, 0x00, 0x00, 0xff]),
        bytes([0x08, 0x02, 0x22, 0x33, 0x00, 0x06, 0x04, 0x05, 0x01, 0x55, 0xd5, 0x9f, 0xe0]),
        # Longer
        bytes([0x08, 0x02, 0x22, 0x33, 0x00, 0x0a, 0x04, 0x05, 0x01, 0x55, 0xd5, 0x9f, 0x41, 0xff, 0xff, 0xff, 0xf1]),

        # Get sensor unique address on trunk response
        # Shorter
        bytes([0x08, 0x04, 0x22, 0x33, 0x00, 0x00, 0xe1]),
        bytes(
            [
                0x08,
                0x04,
                0x22, 0x33,
                0x00,
                0x09,
                0x04,
                0x05,
                0x28, 0xff, 0x2c, 0x7d, 0x90, 0x15, 0x01,
                0xd1
            ]
        ),
        # Longer
        bytes(
            [
                0x08,
                0x04,
                0x22, 0x33,
                0x00,
                0x10,
                0x04,
                0x05,
                0x28, 0xff, 0x2c, 0x7d, 0x90, 0x15, 0x01, 0xc1,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x72
            ]
        ),

        # Set controller address
        # Shorter
        bytes([0x08, 0x08, 0x22, 0x33, 0x00, 0x00, 0xdd]),

        # Longer
        bytes([0x08, 0x08, 0x22, 0x33, 0x00, 0x02, 0xff, 0xff, 0x89]),
        bytes([0x08, 0x08, 0x22, 0x33, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff, 0x67]),

        # Get sensors unique address
        # Shorter
        bytes([0x08, 0x05, 0x22, 0x33, 0x00, 0x00, 0x57]),
        bytes([0x08, 0x05, 0x22, 0x33, 0x00, 0x04, 0x04, 0x28, 0xff, 0x00, 0xad]),

        # Longer (too many sensors)
        bytes(
            [
                0x08,
                0x05,
                0x22, 0x33,
                0x00,
                0x64,
                0x04,
                0x54, 0x00, 0x00, 0x01, 0xf1, 0x5c, 0x57, 0x28,
                0x00,
                0xf8, 0x03, 0x16, 0x74, 0xdc, 0x8a, 0xff, 0x28,
                0x01,
                0x66, 0x04, 0x16, 0x74, 0xb6, 0x16, 0xff, 0x28,
                0x00,
                0xf5, 0x03, 0x16, 0x74, 0xe2, 0x3e, 0xff, 0x28,
                0x01,
                0x9f, 0x04, 0x16, 0x80, 0x54, 0x99, 0xff, 0x28,
                0x00,
                0x87, 0x03, 0x16, 0x74, 0xb4, 0x83, 0xff, 0x28,
                0x00,
                0x28, 0x18, 0xb4, 0x49, 0x0c, 0x00, 0x00, 0x7c,
                0x01,
                0x28, 0xcc, 0x19, 0x49, 0x0c, 0x00, 0x00, 0xbb,
                0x01,
                0x28, 0x19, 0xef, 0x48, 0x0c, 0x00, 0x00, 0x21,
                0x01,
                0x28, 0xc6, 0xde, 0x49, 0xf6, 0xb6, 0x3c, 0x55,
                0x00,
                0x28, 0xff, 0x2c, 0x7d, 0x90, 0x15, 0x01, 0xc1,
                0x00,
                0xd4
            ]
        ),

        # Get temperatures of all sensors on trunk
        # Shorter
        bytes([0x08, 0x03, 0x22, 0x33, 0x00, 0x00, 0x49]),
        bytes([0x08, 0x03, 0x22, 0x33, 0x00, 0x05, 0x04, 0x01, 0x00, 0x80, 0xa7, 0xda]),

        # Longer (too many sensors)
        bytes(
            [
                0x08,
                0x03,
                0x22, 0x33,
                0x00,
                0x38,
                0x04,
                0x01,
                0x55, 0xd5, 0x9f, 0x41,
                0x01,
                0x00, 0x80, 0xa7, 0x41,
                0x01,
                0x00, 0x80, 0x93, 0x41,
                0x00,
                0xff, 0xff, 0xff, 0xff,
                0x01,
                0x00, 0x00, 0x9d, 0x41,
                0x01,
                0x55, 0xd5, 0x9f, 0x41,
                0x01,
                0x00, 0x80, 0xa7, 0x41,
                0x01,
                0x00, 0x80, 0x93, 0x41,
                0x00,
                0xff, 0xff, 0xff, 0xff,
                0x01,
                0x00, 0x00, 0x9d, 0x41,
                0x01,
                0x00, 0x00, 0x9d, 0x41,
                0xdc
            ]
        )
    ]
)
def test_raises_exception_on_wrong_payload_length_when_packet_structure_is_correct(data):
    # First let's check that CRC of all bad samples is correct
    expected_crc_value = default_crc.default_vrc_t70_crc()(data[:-1])
    assert data[-1] == expected_crc_value, "Test case with wrong crc found, please correct inputs"

    # We shouldn't have any exception here if all provided examples are logically correct according
    # to description of responses in protocol
    raw_data = raw_response_data.deserialize(data)

    # And finally we would expect exception here, because even considering that raw data is correct
    # from perspective of response's description, these packets shouldn't be logically correct
    factory = typed_responses_factory.ResponsesFactory()
    with pytest.raises(exceptions.ErrorWrongPayloadLength):
        factory.create(raw_response=raw_data)
